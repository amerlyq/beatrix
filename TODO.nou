SPDX-FileCopyrightText: 2019-2020 Dmytro Kolomoiets <amerlyq@gmail.com> and contributors.

SPDX-License-Identifier: CC-BY-SA-4.0
-----


WARN! it seems pj root Makefile is so messy because *beatrix* purpose is unclear
  ~~ user always wants to extend beatrix in their own code (?wrong suggestion?)
    -- moreover he wants to be able to run ./Makefile and have logging, and...
  ~~ for performance and flexibility we "directly source beatrix"
    <= not totally the same as "using as library"
    => clean compact interface is nowhere to be found


ADD
  [_] documentation pipeline -- doxygen/breathe/sphinx/plantuml
  [_] presentation pipeline -- rst/sphinx/plantuml/reveal.js
  [_] website-devblog pipeline -- nou/rst/sphinx/pelican

  [_] jet-live edit-on-fly (there is too long road to *fleur*)
  [_] gcc/clang folders with basic native toolchains and flags
    BUT: gcc contains too much features -- profiling, LTO, qa-flags...
      => impossible to contain inside single *mod* directory named "gcc"
    ALSO: clang and gcc share many features between themselves ...
    BET: *mod* per feature -- with separate "gcc.mk" and "clang.mk" inside
  [_] MOVE:(seize): sir
    ATT! *beatrix* contains not "ready-to-use" projects, but only !glue!
      => you must extract and move everything beside glue into separate repos
  [_] MOVE:(seize): old/mk-cvs-fetch
  [_] MOVE:(seize): erian/cmakes
  [_] INTG: kirie
  [_] pretty / colorize / filter / tui-cli
  [_] SEE: generate and maintain reports for each language in codebase
    https://github.com/ahamilton/eris
  [_] USE:RFC: facebookincubator/fastmod: A fast partial replacement for the codemod tool
    https://github.com/facebookincubator/fastmod
  [_] TRY: "Ainize" -- Deploy and use Opensource-as-a-Service
    kmswlee/UGATIT: Official Tensorflow implementation of U-GAT-IT: Unsupervised Generative Attentional Networks with Adaptive Layer-Instance Normalization for Image-to-Image Translation (ICLR 2020) ⌇⡞⡿⡚⣋
      https://github.com/kmswlee/ugatit?utm_medium=social&utm_source=youtube&utm_campaign=weekly&utm_content=ugatit


Pipeline
  THINK: generate top-level graph how *mods* combine into pipelines and overall product
  THINK: group low-level mods into layers used by high-level mods
    BET: use library-like flat approach -- create *mod* per each pipeline and main mod "all" to show all pipelines at once
  ARCH: main module name :: {main root beatrix all}
    VIZ: we have conglomerate "beatrix-pj", innards "beatrix-glue", and installd product named "beatrix"
    * "beatrix/beatrix" BAD: creates confusing indistinction between above and encourages recurrent naming scheme
    * "beatrix/all" is rather good -- you can create alternative collections of modules in parallel e.g. "beatrix/minimal"



Module
  [_] ARCH: we have matrix of <purpose/level> x <mod/feature>, not plain list of components
    ? why group around <mod> instead of splitting to independent projects by <purpose> i.e. "beatrix-ide" and "beatrix-mod" ?
      ?? interdependency integration -- same feature (mod) has *reflections* on all levels (purposes)
        <= you can't use high-level IDE features without tightly integrating with project low-level ones first
      !! dataflow channels -- these *reflections* directly interact between themselves
      ~~ capability discovery -- folder of *mod* enlists all available reflections on all levels you can learn and use
  ARCH:(naming chain): [purpose + app-concept/variant + app-lang + test-frwk/fmt + test-lang/binding]
    e.g. [ide + my-cli + make + cmdline + zsh] => ./t/ide-my.mk.zsh BUT:BET: ./t/ide
    test-frwk/fmt :: group different kinds of test
      cmdline "t", unit "test", integration "integ", fuzzy "fzy",
      usecase "usage", workflow "demo", REST API "rest", ...
  ARCH: structure (naming scheme)
    :/version/mod.mk
      + STD ifc
      - multiple mod files opened in vim -- all have the same name (hard to navigate)
      - excessive suffix in make/cmake :: include(version/mod)
    :/version/version.mk
      + unique file names
      + easy install()
      - non-STD file structure
      - must manually sync dirname and cfgname
        ~ BUT: I already do that for C++ anyway :: :/folder/ + project() + .cpp + class{}
    :/_dev/lib/make/version.mk (symlink)
      = manually maintained intermediate installation prefix of symlinks
      + include as prefix for no-install development
      + installation list =is fs itself= instead of obscure scripts
      + copy-dereference symlinks list when installing *beatrix* for real
      - must manually sync fs changes to :/_dev/
    :/_build/beatrix.mk (generate)
      = similarly to CMake+ninja generate "single file ruleset"
      + simple one file interface
      + single file is faster
      - additional intermediate step (complexity)
      - namespace conflicts
    ../_build/_prefix/lib/make/version.mk (dev-install)
      OR: :/_prefix/lib/make/version.mk
      = install to beatrix-static OR pj-local prefix



Tools
  Debug / Profiling
    [_] VIZ https://cppcon.org/class-2019-debugging-and-profiling-cpp-code-on-linux/
    +++ [_] TUT:SECU: https://blog.talosintelligence.com/2016/11/crashing-stacks-without-squishing-bugs.html
  GDB
    [_] READ: https://wiki.documentfoundation.org/Development/How_to_debug
    [_] BLOG https://tromey.com/blog/?cat=17
  radare2
    [_] https://r2wiki.readthedocs.io/en/latest/tools/radare2/
